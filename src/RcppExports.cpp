// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// mv_normal
Eigen::VectorXd mv_normal(Eigen::VectorXd mu, Eigen::MatrixXd sigma);
RcppExport SEXP _geblm_mv_normal(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mv_normal(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// uv_gamma
double uv_gamma(double shape, double rate);
RcppExport SEXP _geblm_uv_gamma(SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(uv_gamma(shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// lm_proper_cpp
Eigen::MatrixXd lm_proper_cpp(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::VectorXd beta_prior_mean, Eigen::MatrixXd beta_prior_cov, double tau_prior_shape, double tau_prior_rate, int iterations, int burnin, int thin, Eigen::VectorXd start_beta);
RcppExport SEXP _geblm_lm_proper_cpp(SEXP XSEXP, SEXP ySEXP, SEXP beta_prior_meanSEXP, SEXP beta_prior_covSEXP, SEXP tau_prior_shapeSEXP, SEXP tau_prior_rateSEXP, SEXP iterationsSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP start_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_prior_mean(beta_prior_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type beta_prior_cov(beta_prior_covSEXP);
    Rcpp::traits::input_parameter< double >::type tau_prior_shape(tau_prior_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type tau_prior_rate(tau_prior_rateSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type start_beta(start_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_proper_cpp(X, y, beta_prior_mean, beta_prior_cov, tau_prior_shape, tau_prior_rate, iterations, burnin, thin, start_beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_geblm_mv_normal", (DL_FUNC) &_geblm_mv_normal, 2},
    {"_geblm_uv_gamma", (DL_FUNC) &_geblm_uv_gamma, 2},
    {"_geblm_lm_proper_cpp", (DL_FUNC) &_geblm_lm_proper_cpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_geblm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
